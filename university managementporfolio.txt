#include <iostream>
#include <vector>
#include <string>

class User {
public:
    User(const std::string& email, const std::string& password)
        : email(email), password(password) {}

    virtual ~User() = default;  // Add a virtual destructor

    virtual void performRoleSpecificAction() const = 0;

    const std::string& getEmail() const {
        return email;
    }

    const std::string& getPassword() const {
        return password;
    }

private:
    std::string email;
    std::string password;
};

class Student : public User {
public:
    Student(const std::string& email, const std::string& password)
        : User(email, password) {}

    void performRoleSpecificAction() const override {
        // Implement student-specific functionality
        std::cout << "Viewing subject-wise marks and attendance...\n";
    }
};

class Teacher : public User {
public:
    Teacher(const std::string& email, const std::string& password)
        : User(email, password) {}

    void performRoleSpecificAction() const override {
        // Implement teacher-specific functionality
        std::cout << "Editing marks...\n";
    }
};

class University {
public:
    void addUser(const std::string& email, const std::string& password, const std::string& role) {
        if (role == "student") {
            students.push_back(Student(email, password));
            std::cout << "Student added successfully.\n";
        } else if (role == "teacher") {
            teachers.push_back(Teacher(email, password));
            std::cout << "Teacher added successfully.\n";
        } else {
            std::cout << "Invalid role.\n";
        }
    }

    User* login(const std::string& email, const std::string& password) {
        for (auto& student : students) {
            if (student.getEmail() == email && student.getPassword() == password) {
                return &student;
            }
        }

        for (auto& teacher : teachers) {
            if (teacher.getEmail() == email && teacher.getPassword() == password) {
                return &teacher;
            }
        }

        return nullptr; // User not found
    }

private:
    std::vector<Student> students;
    std::vector<Teacher> teachers;
};

int main() {
    University university;

    // ... (same as before)

    if (loggedInUser) {
        loggedInUser->performRoleSpecificAction();
    } else {
        std::cout << "Invalid email or password.\n";
    }

    return 0;
}